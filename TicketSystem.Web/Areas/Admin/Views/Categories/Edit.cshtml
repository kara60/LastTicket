@model TicketSystem.Web.Areas.Admin.Models.EditCategoryViewModel

@{
ViewData["Title"] = "Kategori Düzenle";
Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="max-w-6xl mx-auto">
    <!-- Header -->
    <div class="bg-white rounded-lg shadow-sm border border-gray-200 mb-6">
        <div class="px-6 py-4 border-b border-gray-200">
            <div class="flex items-center justify-between">
                <div>
                    <h1 class="text-2xl font-bold text-gray-900">Kategori Düzenle</h1>
                    <p class="text-sm text-gray-600 mt-1">Kategori bilgilerini ve modüllerini düzenleyin</p>
                </div>
                <div class="flex items-center space-x-4">
                    <span class="px-3 py-1 bg-blue-100 text-blue-800 text-sm rounded-full font-medium">
                        ID: @Model.Id
                    </span>
                    <a href="@Url.Action("Index")" class="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors flex items-center">
                        <i class="fas fa-arrow-left mr-2"></i>Geri Dön
                    </a>
                </div>
            </div>
        </div>
    </div>

    <!-- Preview Section -->
    <div class="bg-white rounded-lg shadow-sm border border-gray-200 mb-6">
        <div class="px-6 py-4 border-b border-gray-200">
            <h3 class="text-lg font-medium text-gray-900 flex items-center">
                <i class="fas fa-eye mr-2 text-blue-500"></i>
                Önizleme
            </h3>
        </div>
        <div class="p-6">
            <div id="categoryPreview" class="bg-white rounded-lg shadow border-l-4 p-6" style="border-left-color: @Model.Color;">
                <div class="flex items-center">
                    <div class="w-14 h-14 rounded-xl flex items-center justify-center mr-4" id="previewIconWrapper" style="background-color: @(Model.Color)1a;">
                        <i id="previewIcon" class="fas fa-@Model.Icon text-2xl" style="color: @Model.Color;"></i>
                    </div>
                    <div>
                        <h3 id="previewName" class="text-xl font-medium text-gray-900">@Model.Name</h3>
                        <p id="previewDescription" class="text-sm text-gray-600 mt-1">@(Model.Description ?? "Kategori açıklaması")</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Form Section -->
    <div class="bg-white rounded-lg shadow-sm border border-gray-200">
        <div class="px-6 py-4 border-b border-gray-200">
            <h3 class="text-lg font-medium text-gray-900 flex items-center">
                <i class="fas fa-edit mr-2 text-purple-500"></i>
                Kategori Bilgileri
            </h3>
        </div>

        <div class="p-6">
            <form method="post" asp-action="Edit" asp-route-id="@Model.Id" id="categoryForm">
                @Html.AntiForgeryToken()

                <!-- Validation Summary -->
                @if (!ViewData.ModelState.IsValid)
                {
                <div class="mb-6 p-4 bg-rose-50 border border-rose-200 text-rose-700 rounded-lg">
                    <h3 class="font-medium mb-2">Lütfen aşağıdaki hataları düzeltin:</h3>
                    <div asp-validation-summary="ModelOnly" class="text-sm"></div>
                </div>
                }

                <!-- Basic Category Info -->
                <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
                    <!-- Sol Kolon -->
                    <div class="space-y-6">
                        <!-- Name -->
                        <div>
                            <label asp-for="Name" class="block text-sm font-medium text-gray-700 mb-2">Kategori Adı *</label>
                            <input asp-for="Name"
                                   id="Name"
                                   value="@Model.Name"
                                   class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-colors text-lg"
                                   placeholder="Kategori adını girin" />
                            <span asp-validation-for="Name" class="text-red-500 text-sm"></span>
                        </div>

                        <!-- Description -->
                        <div>
                            <label asp-for="Description" class="block text-sm font-medium text-gray-700 mb-2">Açıklama</label>
                            <textarea asp-for="Description"
                                      id="Description"
                                      rows="4"
                                      class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-colors"
                                      placeholder="Kategori açıklamasını girin">@Model.Description</textarea>
                            <span asp-validation-for="Description" class="text-red-500 text-sm"></span>
                        </div>

                        <!-- Display Order and Status -->
                        <div class="grid grid-cols-2 gap-4">
                            <div>
                                <label asp-for="DisplayOrder" class="block text-sm font-medium text-gray-700 mb-2">Sıralama</label>
                                <input asp-for="DisplayOrder"
                                       type="number"
                                       min="0"
                                       max="999"
                                       value="@Model.DisplayOrder"
                                       class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-colors" />
                                <span asp-validation-for="DisplayOrder" class="text-red-500 text-sm"></span>
                            </div>
                            <div class="flex items-end">
                                <label class="flex items-center cursor-pointer p-3 border border-gray-300 rounded-lg hover:bg-gray-50">
                                    <input asp-for="IsActive"
                                           type="checkbox"
                                           @(Model.IsActive ? "checked" : "")
                                           class="h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded mr-3" />
                                    <span class="text-sm font-medium text-gray-700">Aktif Durum</span>
                                </label>
                            </div>
                        </div>
                    </div>

                    <!-- Sağ Kolon -->
                    <div class="space-y-6">
                        <!-- Icon Selection -->
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-3">Simge Seçin *</label>
                            <div class="grid grid-cols-6 gap-3" id="iconGrid">
                                @{
                                var icons = new[] { "bug", "lightbulb", "graduation-cap", "wrench", "question-circle", "exclamation-triangle", "chart-bar", "users", "desktop", "mobile-alt", "database", "shield-alt" };
                                }
                                @foreach (var icon in icons)
                                {
                                <label class="cursor-pointer">
                                    <input type="radio"
                                           name="Icon"
                                           value="@icon"
                                           class="sr-only icon-radio"
                                           @(Model.Icon == icon ? "checked" : "") />
                                    <div class="icon-option w-14 h-14 border-2 @(Model.Icon == icon ? "border-purple-500 bg-purple-50" : "border-gray-200") rounded-lg flex items-center justify-center hover:border-purple-300 transition-colors">
                                        <i class="fas fa-@icon text-xl text-gray-600"></i>
                                    </div>
                                </label>
                                }
                            </div>
                            <span asp-validation-for="Icon" class="text-red-500 text-sm"></span>
                        </div>

                        <!-- Color Selection -->
                        <div class="grid grid-cols-2 gap-4">
                            <div>
                                <label asp-for="Color" class="block text-sm font-medium text-gray-700 mb-2">Renk Kodu</label>
                                <input asp-for="Color"
                                       id="Color"
                                       value="@Model.Color"
                                       class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-colors font-mono"
                                       placeholder="#6366f1" />
                                <span asp-validation-for="Color" class="text-red-500 text-sm"></span>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Renk Seçici</label>
                                <input type="color"
                                       id="ColorPicker"
                                       value="@Model.Color"
                                       class="w-full h-12 border border-gray-300 rounded-lg cursor-pointer" />
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Modules Section -->
                <div class="border-t border-gray-200 pt-8">
                    <div class="flex items-center justify-between mb-6">
                        <div class="border-l-4 border-green-500 pl-4">
                            <h2 class="text-xl font-semibold text-gray-900 flex items-center">
                                <i class="fas fa-puzzle-piece mr-3 text-green-500"></i>
                                Modül Yönetimi
                            </h2>
                            <p class="text-sm text-gray-600 mt-1">Bu kategoriye ait modülleri yönetin</p>
                        </div>
                        <button type="button"
                                id="addModuleBtn"
                                class="px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors flex items-center font-medium">
                            <i class="fas fa-plus mr-2"></i>Modül Ekle
                        </button>
                    </div>

                    <div id="modulesList" class="space-y-4">
                        @for (int i = 0; i < Model.Modules.Count; i++)
                        {
                        <div class="module-item bg-gray-50 border border-gray-200 rounded-lg p-6">
                            <input type="hidden" name="Modules[@i].Id" value="@Model.Modules[i].Id" />
                            <input type="hidden" name="Modules[@i].IsActive" value="false" />
                            <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Modül Adı *</label>
                                    <div class="relative">
                                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                            <i class="fas fa-cube text-gray-400"></i>
                                        </div>
                                        <input name="Modules[@i].Name"
                                               value="@Model.Modules[i].Name"
                                               class="w-full pl-10 pr-3 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-colors"
                                               placeholder="Modül adını girin" />
                                    </div>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Açıklama</label>
                                    <div class="relative">
                                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                            <i class="fas fa-comment text-gray-400"></i>
                                        </div>
                                        <input name="Modules[@i].Description"
                                               value="@Model.Modules[i].Description"
                                               class="w-full pl-10 pr-3 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-colors"
                                               placeholder="Açıklama (opsiyonel)" />
                                    </div>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Sıra</label>
                                    <div class="relative">
                                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                            <i class="fas fa-sort text-gray-400"></i>
                                        </div>
                                        <input name="Modules[@i].DisplayOrder"
                                               type="number"
                                               value="@Model.Modules[i].DisplayOrder"
                                               min="0"
                                               max="999"
                                               class="w-full pl-10 pr-3 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-colors" />
                                    </div>
                                </div>
                                <div class="flex items-end justify-between">
                                    <label class="flex items-center cursor-pointer p-3 border border-gray-200 rounded-lg hover:bg-gray-100">
                                        <input name="Modules[@i].IsActive"
                                               type="checkbox"
                                               value="true"
                                               @(Model.Modules[i].IsActive ? "checked" : "")
                                               class="h-4 w-4 text-green-600 focus:ring-green-500 border-gray-300 rounded">
                                        <span class="ml-2 text-sm text-gray-700">Aktif</span>
                                    </label>
                                    <button type="button"
                                            onclick="removeModule(this)"
                                            class="p-3 text-red-600 hover:text-red-800 hover:bg-red-50 rounded-lg transition-colors">
                                        <i class="fas fa-trash-alt"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                        }
                    </div>

                    <div id="emptyModulesMessage" class="text-center py-12 bg-gray-50 rounded-lg border-2 border-dashed border-gray-300" @(Model.Modules.Any() ? "style=display:none;" : "")>
                        <i class="fas fa-puzzle-piece text-gray-400 text-4xl mb-4"></i>
                        <p class="text-gray-500 text-lg">Henüz modül eklenmemiş</p>
                        <p class="text-sm text-gray-400 mt-2">Modül eklemek için yukarıdaki butonu kullanın</p>
                    </div>
                </div>

                <!-- Action Buttons -->
                <div class="flex items-center justify-between pt-8 mt-8 border-t border-gray-200">
                    <button type="button"
                            onclick="if(confirm('Bu kategoriyi silmek istediğinizden emin misiniz? Bu işlem geri alınamaz.')) { document.getElementById('deleteForm').submit(); }"
                            class="px-6 py-3 bg-red-100 text-red-700 rounded-lg hover:bg-red-200 transition-colors flex items-center font-medium">
                        <i class="fas fa-trash mr-2"></i>
                        Kategoriyi Sil
                    </button>

                    <div class="flex items-center space-x-4">
                        <a href="@Url.Action("Index")"
                           class="px-8 py-3 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors font-medium">
                            İptal
                        </a>
                        <button type="submit"
                                id="submitBtn"
                                class="px-10 py-3 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors flex items-center font-medium">
                            <i class="fas fa-save mr-2"></i>
                            Değişiklikleri Kaydet
                        </button>
                    </div>
                </div>
            </form>

            <!-- Hidden Delete Form -->
            <form id="deleteForm" method="post" action="/Admin/Categories/Delete/@Model.Id" class="hidden">
                @Html.AntiForgeryToken()
            </form>
        </div>
    </div>
</div>

<script>
    (function() {
        'use strict';

        let moduleIndex = @Model.Modules.Count;

        // Sayfa yüklendikten sonra başlat
        document.addEventListener('DOMContentLoaded', function() {
            console.log('Edit sayfası yüklendi, mevcut modül sayısı:', moduleIndex);
            initializeAll();
        });

        function initializeAll() {
            initializeFormHandlers();
            initializePreview();
            initializeModuleHandlers();
            initializeIconSelection();
            initializeColorPicker();

            // İlk önizlemeyi güncelle
            updatePreview();

            console.log('Edit sayfası başlatıldı');
        }

        function initializeFormHandlers() {
            const form = document.getElementById('categoryForm');
            if (!form) {
                console.error('Form bulunamadı');
                return;
            }

            form.addEventListener('submit', function(e) {
                console.log('Form gönderiliyor...');

                // Icon seçimi kontrolü
                const selectedIcon = document.querySelector('input[name="Icon"]:checked');
                if (!selectedIcon) {
                    alert('Lütfen bir simge seçin!');
                    e.preventDefault();
                    return false;
                }

                // Renk kontrolü
                const colorInput = document.getElementById('Color');
                if (!colorInput.value || !/^#[0-9A-F]{6}$/i.test(colorInput.value)) {
                    alert('Lütfen geçerli bir renk kodu girin!');
                    e.preventDefault();
                    return false;
                }

                console.log('Form geçerli, gönderiliyor...');
                return true;
            });
        }

        function initializePreview() {
            const nameInput = document.getElementById('Name');
            const descriptionInput = document.getElementById('Description');

            if (nameInput) {
                nameInput.addEventListener('input', updatePreview);
            }

            if (descriptionInput) {
                descriptionInput.addEventListener('input', updatePreview);
            }
        }

        function initializeIconSelection() {
            const iconRadios = document.querySelectorAll('.icon-radio');

            iconRadios.forEach(function(radio) {
                radio.addEventListener('change', function() {
                    console.log('Icon değişti:', this.value);

                    // Tüm icon seçeneklerini resetle
                    document.querySelectorAll('.icon-option').forEach(function(option) {
                        option.classList.remove('border-purple-500', 'bg-purple-50');
                        option.classList.add('border-gray-200');
                    });

                    // Seçili olanı vurgula
                    if (this.checked) {
                        const option = this.nextElementSibling;
                        option.classList.remove('border-gray-200');
                        option.classList.add('border-purple-500', 'bg-purple-50');
                    }

                    updatePreview();
                });
            });
        }

        function initializeColorPicker() {
            const colorPicker = document.getElementById('ColorPicker');
            const colorInput = document.getElementById('Color');

            if (colorPicker && colorInput) {
                colorPicker.addEventListener('input', function() {
                    console.log('Renk seçici değişti:', this.value);
                    colorInput.value = this.value;
                    updatePreview();
                });

                colorInput.addEventListener('input', function() {
                    console.log('Renk input değişti:', this.value);
                    if (/^#[0-9A-F]{6}$/i.test(this.value)) {
                        colorPicker.value = this.value;
                        updatePreview();
                    }
                });
            }
        }

        function initializeModuleHandlers() {
            const addModuleBtn = document.getElementById('addModuleBtn');
            if (addModuleBtn) {
                addModuleBtn.addEventListener('click', function() {
                    console.log('Modül ekleniyor...');
                    addModule();
                });
            }
        }

        function addModule() {
            const modulesList = document.getElementById('modulesList');
            const emptyMessage = document.getElementById('emptyModulesMessage');

            if (emptyMessage) {
                emptyMessage.style.display = 'none';
            }

            const moduleDiv = document.createElement('div');
            moduleDiv.className = 'module-item bg-gray-50 border border-gray-200 rounded-lg p-6';
            moduleDiv.innerHTML =
                '<input type="hidden" name="Modules[' + moduleIndex + '].Id" value="0" />' +
                '<input type="hidden" name="Modules[' + moduleIndex + '].IsActive" value="false" />' +
                '<div class="grid grid-cols-1 md:grid-cols-4 gap-6">' +
                '<div>' +
                '<label class="block text-sm font-medium text-gray-700 mb-2">Modül Adı *</label>' +
                '<div class="relative">' +
                '<div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">' +
                '<i class="fas fa-cube text-gray-400"></i>' +
                '</div>' +
                '<input name="Modules[' + moduleIndex + '].Name"' +
                ' class="w-full pl-10 pr-3 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-colors"' +
                ' placeholder="Modül adını girin" required />' +
                '</div>' +
                '</div>' +
                '<div>' +
                '<label class="block text-sm font-medium text-gray-700 mb-2">Açıklama</label>' +
                '<div class="relative">' +
                '<div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">' +
                '<i class="fas fa-comment text-gray-400"></i>' +
                '</div>' +
                '<input name="Modules[' + moduleIndex + '].Description"' +
                ' class="w-full pl-10 pr-3 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-colors"' +
                ' placeholder="Açıklama (opsiyonel)" />' +
                '</div>' +
                '</div>' +
                '<div>' +
                '<label class="block text-sm font-medium text-gray-700 mb-2">Sıra</label>' +
                '<div class="relative">' +
                '<div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">' +
                '<i class="fas fa-sort text-gray-400"></i>' +
                '</div>' +
                '<input name="Modules[' + moduleIndex + '].DisplayOrder"' +
                ' type="number" value="0" min="0" max="999"' +
                ' class="w-full pl-10 pr-3 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-colors" />' +
                '</div>' +
                '</div>' +
                '<div class="flex items-end justify-between">' +
                '<label class="flex items-center cursor-pointer p-3 border border-gray-200 rounded-lg hover:bg-gray-100">' +
                '<input name="Modules[' + moduleIndex + '].IsActive" type="checkbox" value="true" checked' +
                ' class="h-4 w-4 text-green-600 focus:ring-green-500 border-gray-300 rounded">' +
                '<span class="ml-2 text-sm text-gray-700">Aktif</span>' +
                '</label>' +
                '<button type="button" onclick="removeModule(this)"' +
                ' class="p-3 text-red-600 hover:text-red-800 hover:bg-red-50 rounded-lg transition-colors">' +
                '<i class="fas fa-trash-alt"></i>' +
                '</button>' +
                '</div>' +
                '</div>';

            modulesList.appendChild(moduleDiv);
            moduleIndex++;

            // Focus yeni input'a
            const newNameInput = moduleDiv.querySelector('input[name*=".Name"]');
            if (newNameInput) {
                newNameInput.focus();
            }

            console.log('Modül eklendi, yeni index:', moduleIndex);
        }

        // Global fonksiyon - onclick için gerekli
        window.removeModule = function(button) {
            const moduleItem = button.closest('.module-item');
            if (moduleItem) {
                moduleItem.remove();
            }

            const modulesList = document.getElementById('modulesList');
            const emptyMessage = document.getElementById('emptyModulesMessage');

            if (modulesList && modulesList.children.length === 0 && emptyMessage) {
                emptyMessage.style.display = 'block';
            }

            reindexModules();
            console.log('Modül silindi, yeni index:', moduleIndex);
        };

        function reindexModules() {
            const moduleItems = document.querySelectorAll('.module-item');
            moduleItems.forEach(function(item, index) {
                const hiddenId = item.querySelector('input[name*=".Id"]');
                const hiddenIsActive = item.querySelector('input[type="hidden"][name*=".IsActive"]');
                const nameInput = item.querySelector('input[name*=".Name"]');
                const descInput = item.querySelector('input[name*=".Description"]');
                const orderInput = item.querySelector('input[name*=".DisplayOrder"]');
                const activeCheckbox = item.querySelector('input[type="checkbox"][name*=".IsActive"]');

                if (hiddenId) hiddenId.name = 'Modules[' + index + '].Id';
                if (hiddenIsActive) hiddenIsActive.name = 'Modules[' + index + '].IsActive';
                if (nameInput) nameInput.name = 'Modules[' + index + '].Name';
                if (descInput) descInput.name = 'Modules[' + index + '].Description';
                if (orderInput) orderInput.name = 'Modules[' + index + '].DisplayOrder';
                if (activeCheckbox) activeCheckbox.name = 'Modules[' + index + '].IsActive';
            });

            moduleIndex = moduleItems.length;
        }

        function updatePreview() {
            const nameInput = document.getElementById('Name');
            const descriptionInput = document.getElementById('Description');
            const colorInput = document.getElementById('Color');
            const selectedIconEl = document.querySelector('.icon-radio:checked') || document.querySelector('input[asp-for="Icon"]:checked');

            const name = nameInput ? nameInput.value || 'Kategori Adı' : 'Kategori Adı';
            const description = descriptionInput ? descriptionInput.value || 'Kategori açıklaması' : 'Kategori açıklaması';
            const color = colorInput ? colorInput.value || '#6366f1' : '#6366f1';
            const selectedIcon = selectedIconEl ? selectedIconEl.value : 'folder';

            // Preview elementlerini güncelle
            const previewName = document.getElementById('previewName');
            const previewDescription = document.getElementById('previewDescription');
            const previewIcon = document.getElementById('previewIcon');
            const previewIconWrapper = document.getElementById('previewIconWrapper');
            const categoryPreview = document.getElementById('categoryPreview');

            if (previewName) {
                previewName.textContent = name;
            }

            if (previewDescription) {
                previewDescription.textContent = description;
            }

            if (previewIcon) {
                previewIcon.className = 'fas fa-' + selectedIcon + ' text-2xl';
                previewIcon.style.color = color;
            }

            if (previewIconWrapper) {
                previewIconWrapper.style.backgroundColor = color + '1a';
            }

            if (categoryPreview) {
                categoryPreview.style.borderLeftColor = color;
            }

            console.log('Önizleme güncellendi:', { name: name, color: color, icon: selectedIcon });
        }

    })();
</script>

@section Scripts {
<partial name="_ValidationScriptsPartial" />
}