@model IEnumerable<TicketSystem.Domain.Entities.TicketType>
@{
    ViewData["Title"] = "Ticket Türleri";
}

<div class="h-screen overflow-hidden bg-gray-50 p-4">
    <div class="max-w-7xl mx-auto h-full flex flex-col">

        <!-- Header Section - Fixed -->
        <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-6">
            <div>
                <h1 class="text-2xl font-bold text-gray-900">Ticket Türleri</h1>
                <p class="text-gray-600">Farklı ticket türlerini yönetin ve form alanlarını özelleştirin.</p>
            </div>
            <div class="mt-4 sm:mt-0">
                <a href="@Url.Action("Create")"
                   class="inline-flex items-center px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 shadow-lg transition-colors">
                    <i class="fas fa-plus mr-2"></i>
                    Yeni Tür Ekle
                </a>
            </div>
        </div>

        <!-- Stats Cards -->
        <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
            <div class="bg-white rounded-lg p-4 shadow-sm border border-gray-200">
                <div class="flex items-center">
                    <div class="p-2 bg-blue-100 rounded-lg">
                        <i class="fas fa-layer-group text-blue-600"></i>
                    </div>
                    <div class="ml-3">
                        <p class="text-sm font-medium text-gray-600">Toplam Tür</p>
                        <p class="text-lg font-semibold text-gray-900">@Model.Count()</p>
                    </div>
                </div>
            </div>
            <div class="bg-white rounded-lg p-4 shadow-sm border border-gray-200">
                <div class="flex items-center">
                    <div class="p-2 bg-green-100 rounded-lg">
                        <i class="fas fa-check-circle text-green-600"></i>
                    </div>
                    <div class="ml-3">
                        <p class="text-sm font-medium text-gray-600">Aktif</p>
                        <p class="text-lg font-semibold text-gray-900">@Model.Count(x => x.IsActive)</p>
                    </div>
                </div>
            </div>
            <div class="bg-white rounded-lg p-4 shadow-sm border border-gray-200">
                <div class="flex items-center">
                    <div class="p-2 bg-red-100 rounded-lg">
                        <i class="fas fa-pause-circle text-red-600"></i>
                    </div>
                    <div class="ml-3">
                        <p class="text-sm font-medium text-gray-600">Pasif</p>
                        <p class="text-lg font-semibold text-gray-900">@Model.Count(x => !x.IsActive)</p>
                    </div>
                </div>
            </div>
            <div class="bg-white rounded-lg p-4 shadow-sm border border-gray-200">
                <div class="flex items-center">
                    <div class="p-2 bg-purple-100 rounded-lg">
                        <i class="fas fa-list-alt text-purple-600"></i>
                    </div>
                    <div class="ml-3">
                        <p class="text-sm font-medium text-gray-600">Form Alanları</p>
                        @{
                            var totalFields = 0;
                            foreach (var type in Model)
                            {
                                if (!string.IsNullOrEmpty(type.FormDefinition))
                                {
                                    try
                                    {
                                        var formDef = System.Text.Json.JsonSerializer.Deserialize<System.Text.Json.JsonElement>(type.FormDefinition);
                                        if (formDef.TryGetProperty("fields", out var fieldsElement))
                                        {
                                            totalFields += fieldsElement.GetArrayLength();
                                        }
                                    }
                                    catch { }
                                }
                            }
                        }
                        <p class="text-lg font-semibold text-gray-900">@totalFields</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Content Area - Scrollable -->
        <div class="flex-1 overflow-y-auto">
            @if (Model.Any())
            {
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    @foreach (var ticketType in Model)
                    {
                        var fieldCount = 0;
                        if (!string.IsNullOrEmpty(ticketType.FormDefinition))
                        {
                            try
                            {
                                var formDef = System.Text.Json.JsonSerializer.Deserialize<System.Text.Json.JsonElement>(ticketType.FormDefinition);
                                if (formDef.TryGetProperty("fields", out var fieldsElement))
                                {
                                    fieldCount = fieldsElement.GetArrayLength();
                                }
                            }
                            catch { }
                        }

                        <div class="bg-white rounded-xl shadow-sm border border-gray-200 hover:shadow-md transition-shadow duration-200 overflow-hidden">
                            <!-- Card Header -->
                            <div class="p-6 border-l-4" style="border-left-color: @ticketType.Color;">
                                <div class="flex items-start justify-between">
                                    <div class="flex items-center flex-1">
                                        <div class="w-12 h-12 rounded-xl flex items-center justify-center mr-4 shadow-sm"
                                             style="background-color: @(ticketType.Color)20">
                                            @switch (ticketType.Icon)
                                            {
                                                case "bug":
                                                    <span class="text-2xl">🐛</span>
                                                    break;
                                                case "lightbulb":
                                                    <span class="text-2xl">💡</span>
                                                    break;
                                                case "graduation-cap":
                                                    <span class="text-2xl">🎓</span>
                                                    break;
                                                case "cog":
                                                    <span class="text-2xl">⚙️</span>
                                                    break;
                                                case "question-circle":
                                                    <span class="text-2xl">❓</span>
                                                    break;
                                                case "exclamation-triangle":
                                                    <span class="text-2xl">⚠️</span>
                                                    break;
                                                case "tools":
                                                    <span class="text-2xl">🔧</span>
                                                    break;
                                                case "chart-line":
                                                    <span class="text-2xl">📈</span>
                                                    break;
                                                case "headset":
                                                    <span class="text-2xl">🎧</span>
                                                    break;
                                                case "rocket":
                                                    <span class="text-2xl">🚀</span>
                                                    break;
                                                default:
                                                    <i class="fas fa-@ticketType.Icon text-xl" style="color: @ticketType.Color;"></i>
                                                    break;
                                            }
                                        </div>
                                        <div class="flex-1 min-w-0">
                                            <h3 class="text-lg font-semibold text-gray-900 truncate">@ticketType.Name</h3>
                                            <div class="flex items-center mt-1">
                                                <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full @(ticketType.IsActive ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800")">
                                                    @(ticketType.IsActive ? "Aktif" : "Pasif")
                                                </span>
                                                <span class="mx-2 text-gray-300">•</span>
                                                <span class="text-xs text-gray-500">Sıra: @ticketType.SortOrder</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <!-- Description -->
                                @if (!string.IsNullOrEmpty(ticketType.Description))
                                {
                                    <p class="text-gray-600 text-sm mt-3 line-clamp-2">@ticketType.Description</p>
                                }
                            </div>

                            <!-- Form Fields Info -->
                            <div class="px-6 py-4 bg-gray-50 border-t border-gray-100">
                                <div class="flex items-center justify-between text-sm">
                                    <div class="flex items-center text-gray-600">
                                        <i class="fas fa-list-alt mr-2"></i>
                                        <span>@fieldCount form alanı</span>
                                    </div>
                                    @if (fieldCount > 0)
                                    {
                                        <span class="text-blue-600 font-medium">Tanımlı ✓</span>
                                    }
                                    else
                                    {
                                        <span class="text-amber-600 font-medium">Boş</span>
                                    }
                                </div>
                            </div>

                            <!-- Actions -->
                            <div class="px-6 py-4 bg-white border-t border-gray-100">
                                <div class="flex space-x-2">
                                    <a href="@Url.Action("Edit", new { id = ticketType.Id })"
                                       class="flex-1 bg-blue-600 text-white text-center py-2 px-3 rounded-lg text-sm hover:bg-blue-700 transition-colors">
                                        <i class="fas fa-edit mr-1"></i>Düzenle
                                    </a>

                                    <form method="post" asp-action="ToggleStatus" asp-route-id="@ticketType.Id" class="flex-1">
                                        @Html.AntiForgeryToken()
                                        <button type="submit" class="w-full @(ticketType.IsActive ? "bg-amber-500 hover:bg-amber-600" : "bg-green-600 hover:bg-green-700") text-white py-2 px-3 rounded-lg text-sm transition-colors">
                                            <i class="fas fa-@(ticketType.IsActive ? "pause" : "play") mr-1"></i>
                                            @(ticketType.IsActive ? "Pasifleştir" : "Aktifleştir")
                                        </button>
                                    </form>

                                    <form method="post" asp-action="Delete" asp-route-id="@ticketType.Id"
                                          onsubmit="return confirm('Bu ticket türünü silmek istediğinizden emin misiniz? Bu işlem geri alınamaz.')">
                                        @Html.AntiForgeryToken()
                                        <button type="submit" class="bg-red-600 text-white py-2 px-3 rounded-lg text-sm hover:bg-red-700 transition-colors">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </form>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <!-- Empty State -->
                <div class="text-center py-12">
                    <div class="w-24 h-24 mx-auto bg-gray-100 rounded-full flex items-center justify-center mb-4">
                        <i class="fas fa-cog text-gray-400 text-3xl"></i>
                    </div>
                    <h3 class="text-lg font-medium text-gray-900 mb-2">Henüz ticket türü yok</h3>
                    <p class="text-gray-500 mb-6 max-w-sm mx-auto">
                        İlk ticket türünüzü oluşturun ve sistem kullanıcılarının farklı türde ticket'lar açabilmesini sağlayın.
                    </p>
                    <div class="flex flex-col sm:flex-row gap-3 justify-center">
                        <a href="@Url.Action("Create")"
                           class="inline-flex items-center px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                            <i class="fas fa-plus mr-2"></i>İlk Ticket Türünü Oluştur
                        </a>
                        <a href="#"
                           class="inline-flex items-center px-6 py-3 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
                           onclick="showExamples()">
                            <i class="fas fa-lightbulb mr-2"></i>Örnek Türleri Gör
                        </a>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Examples Modal -->
<div id="examplesModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50 hidden">
    <div class="relative top-20 mx-auto p-5 border w-11/12 md:w-3/4 lg:w-1/2 shadow-lg rounded-lg bg-white">
        <div class="flex items-center justify-between mb-4">
            <h3 class="text-lg font-semibold text-gray-900">Örnek Ticket Türleri</h3>
            <button onclick="hideExamples()" class="text-gray-400 hover:text-gray-600">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="space-y-4">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div class="border rounded-lg p-4">
                    <div class="flex items-center mb-2">
                        <span class="text-2xl mr-3">🐛</span>
                        <div>
                            <h4 class="font-medium">Hata Bildirimi</h4>
                            <p class="text-sm text-gray-600">Sistem hatalarını bildirmek için</p>
                        </div>
                    </div>
                    <div class="text-xs text-gray-500">
                        Form alanları: Hata açıklaması, Adımlar, Ekran görüntüsü
                    </div>
                </div>
                <div class="border rounded-lg p-4">
                    <div class="flex items-center mb-2">
                        <span class="text-2xl mr-3">💡</span>
                        <div>
                            <h4 class="font-medium">Yeni Özellik</h4>
                            <p class="text-sm text-gray-600">Özellik istekleri için</p>
                        </div>
                    </div>
                    <div class="text-xs text-gray-500">
                        Form alanları: Özellik açıklaması, İş değeri, Öncelik
                    </div>
                </div>
                <div class="border rounded-lg p-4">
                    <div class="flex items-center mb-2">
                        <span class="text-2xl mr-3">🎓</span>
                        <div>
                            <h4 class="font-medium">Eğitim Talebi</h4>
                            <p class="text-sm text-gray-600">Eğitim ve danışmanlık için</p>
                        </div>
                    </div>
                    <div class="text-xs text-gray-500">
                        Form alanları: Eğitim konusu, Katılımcı sayısı, Tarih
                    </div>
                </div>
                <div class="border rounded-lg p-4">
                    <div class="flex items-center mb-2">
                        <span class="text-2xl mr-3">🎧</span>
                        <div>
                            <h4 class="font-medium">Teknik Destek</h4>
                            <p class="text-sm text-gray-600">Genel destek talepleri için</p>
                        </div>
                    </div>
                    <div class="text-xs text-gray-500">
                        Form alanları: Problem açıklaması, Aciliyet, İletişim
                    </div>
                </div>
            </div>
        </div>
        <div class="mt-6 flex justify-end">
            <button onclick="hideExamples()"
                    class="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors">
                Kapat
            </button>
        </div>
    </div>
</div>

<script>
    function showExamples() {
        const modal = document.getElementById('examplesModal');
        if (modal) {
            modal.classList.remove('hidden');
        }
    }

    function hideExamples() {
        const modal = document.getElementById('examplesModal');
        if (modal) {
            modal.classList.add('hidden');
        }
    }

    // Auto-hide alerts
    document.addEventListener('DOMContentLoaded', function() {
        // Loading states for forms
        const forms = document.querySelectorAll('form');
        forms.forEach(form => {
            form.addEventListener('submit', function() {
                const submitBtn = form.querySelector('button[type="submit"]');
                if (submitBtn && !submitBtn.disabled) {
                    const originalContent = submitBtn.innerHTML;
                    submitBtn.disabled = true;

                    if (submitBtn.textContent.includes('Düzenle')) {
                        submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-1"></i>Düzenleniyor...';
                    } else if (submitBtn.textContent.includes('Pasif') || submitBtn.textContent.includes('Aktif')) {
                        submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-1"></i>Güncelleniyor...';
                    } else {
                        submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-1"></i>İşleniyor...';
                    }

                    // Reset after 10 seconds if no response
                    setTimeout(() => {
                        submitBtn.disabled = false;
                        submitBtn.innerHTML = originalContent;
                    }, 10000);
                }
            });
        });

        // Close modal with Escape key
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                hideExamples();
            }
        });

        // Close modal when clicking outside
        const examplesModal = document.getElementById('examplesModal');
        if (examplesModal) {
            examplesModal.addEventListener('click', function(e) {
                if (e.target === this) {
                    hideExamples();
                }
            });
        }
    });
</script>