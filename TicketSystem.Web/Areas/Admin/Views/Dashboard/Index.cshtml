@model TicketSystem.Application.Features.Dashboard.Queries.GetDashboardStats.DashboardStatsDto
@{
    ViewData["Title"] = "Admin Dashboard";
}

<!-- Header - Compact -->
<div class="bg-gradient-to-r from-blue-600 to-purple-700 rounded-lg text-white p-4 mb-6 shadow-md">
    <div class="flex items-center justify-between">
        <div>
            <h1 class="text-xl font-bold">Yönetici Paneli</h1>
            <p class="text-blue-100 text-sm">Sistem genel görünümü</p>
        </div>
        <div class="text-right">
            <div class="bg-white/20 backdrop-blur-sm rounded-md p-2">
                <p class="text-sm font-medium">@DateTime.Now.ToString("dd.MM.yyyy")</p>
                <p class="text-xs text-blue-100">@DateTime.Now.ToString("HH:mm")</p>
            </div>
        </div>
    </div>
</div>

<!-- Main Layout -->
<div class="grid grid-cols-1 xl:grid-cols-4 gap-6">

    <!-- Left Column: Stats & Charts (3 columns) -->
    <div class="xl:col-span-3 space-y-6">

        <!-- Stats Row -->
        <div class="grid grid-cols-2 md:grid-cols-6 gap-3">
            <!-- Toplam -->
            <div class="bg-white rounded-lg shadow-sm border p-3 text-center">
                <div class="w-8 h-8 bg-slate-100 rounded-lg flex items-center justify-center mx-auto mb-2">
                    <i class="fas fa-ticket-alt text-slate-600 text-sm"></i>
                </div>
                <p class="text-xs text-gray-600 mb-1">Toplam</p>
                <p class="text-lg font-bold text-slate-700">@Model.TotalTickets</p>
            </div>

            <!-- İnceleniyor -->
            <div class="bg-white rounded-lg shadow-sm border p-3 text-center">
                <div class="w-8 h-8 bg-amber-100 rounded-lg flex items-center justify-center mx-auto mb-2">
                    <i class="fas fa-eye text-amber-600 text-sm"></i>
                </div>
                <p class="text-xs text-gray-600 mb-1">İnceleniyor</p>
                <p class="text-lg font-bold text-amber-600">@(Model.TicketsByStatus?.FirstOrDefault(x => x.Status == "İnceleniyor")?.Count ?? 0)</p>
            </div>

            <!-- İşlemde -->
            <div class="bg-white rounded-lg shadow-sm border p-3 text-center">
                <div class="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center mx-auto mb-2">
                    <i class="fas fa-cogs text-blue-600 text-sm"></i>
                </div>
                <p class="text-xs text-gray-600 mb-1">İşlemde</p>
                <p class="text-lg font-bold text-blue-600">@(Model.TicketsByStatus?.FirstOrDefault(x => x.Status == "İşlemde")?.Count ?? 0)</p>
            </div>

            <!-- Çözüldü -->
            <div class="bg-white rounded-lg shadow-sm border p-3 text-center">
                <div class="w-8 h-8 bg-emerald-100 rounded-lg flex items-center justify-center mx-auto mb-2">
                    <i class="fas fa-check-circle text-emerald-600 text-sm"></i>
                </div>
                <p class="text-xs text-gray-600 mb-1">Çözüldü</p>
                <p class="text-lg font-bold text-emerald-600">@Model.ResolvedTickets</p>
            </div>

            <!-- Kapatıldı -->
            <div class="bg-white rounded-lg shadow-sm border p-3 text-center">
                <div class="w-8 h-8 bg-slate-100 rounded-lg flex items-center justify-center mx-auto mb-2">
                    <i class="fas fa-archive text-slate-600 text-sm"></i>
                </div>
                <p class="text-xs text-gray-600 mb-1">Kapatıldı</p>
                <p class="text-lg font-bold text-slate-600">@Model.ClosedTickets</p>
            </div>

            <!-- Reddedildi -->
            <div class="bg-white rounded-lg shadow-sm border p-3 text-center">
                <div class="w-8 h-8 bg-red-100 rounded-lg flex items-center justify-center mx-auto mb-2">
                    <i class="fas fa-times-circle text-red-600 text-sm"></i>
                </div>
                <p class="text-xs text-gray-600 mb-1">Reddedildi</p>
                <p class="text-lg font-bold text-red-600">@(Model.RejectedTickets ?? 0)</p>
            </div>
        </div>

        <!-- Charts Row -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-4">
            <!-- Status Chart -->
            <div class="bg-white rounded-lg shadow-sm border p-4">
                <div class="flex items-center justify-between mb-4">
                    <h3 class="text-base font-semibold text-gray-900">Durum Dağılımı</h3>
                    <i class="fas fa-chart-pie text-gray-400 text-sm"></i>
                </div>
                @if (Model.TicketsByStatus?.Any() == true)
                {
                    <div class="h-48">
                        <canvas id="statusChart" class="w-full h-full"></canvas>
                    </div>
                }
                else
                {
                    <div class="h-48 flex items-center justify-center">
                        <div class="text-center">
                            <i class="fas fa-chart-pie text-gray-300 text-2xl mb-2"></i>
                            <p class="text-sm text-gray-500">Veri bulunmuyor</p>
                        </div>
                    </div>
                }
            </div>

            <!-- Type Chart -->
            <div class="bg-white rounded-lg shadow-sm border p-4">
                <div class="flex items-center justify-between mb-4">
                    <h3 class="text-base font-semibold text-gray-900">Tür Dağılımı</h3>
                    <i class="fas fa-chart-bar text-gray-400 text-sm"></i>
                </div>
                @if (Model.TicketsByType?.Any() == true)
                {
                    <div class="h-48">
                        <canvas id="typeChart" class="w-full h-full"></canvas>
                    </div>
                }
                else
                {
                    <div class="h-48 flex items-center justify-center">
                        <div class="text-center">
                            <i class="fas fa-chart-bar text-gray-300 text-2xl mb-2"></i>
                            <p class="text-sm text-gray-500">Veri bulunmuyor</p>
                        </div>
                    </div>
                }
            </div>
        </div>

        <!-- Müşteri Karşılaştırma Tablosu -->
        @if (Model.TicketsByCustomer?.Any() == true)
        {
            <div class="bg-white rounded-lg shadow-sm border p-4">
                <div class="flex items-center justify-between mb-4">
                    <h3 class="text-base font-semibold text-gray-900">Müşteri Performans Analizi</h3>
                    <div class="flex items-center space-x-2">
                        <select id="timeFilter" class="text-xs border border-gray-300 rounded px-2 py-1">
                            <option value="monthly">Aylık</option>
                            <option value="yearly">Yıllık</option>
                            <option value="weekly">Haftalık</option>
                        </select>
                        <i class="fas fa-users text-gray-400 text-sm"></i>
                    </div>
                </div>

                <div class="overflow-x-auto">
                    <table class="min-w-full text-sm">
                        <thead class="bg-gray-50">
                            <tr>
                                <th class="px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase">Müşteri</th>
                                <th class="px-3 py-2 text-center text-xs font-medium text-gray-500 uppercase">Toplam</th>
                                <th class="px-3 py-2 text-center text-xs font-medium text-gray-500 uppercase">İnceleniyor</th>
                                <th class="px-3 py-2 text-center text-xs font-medium text-gray-500 uppercase">Çözülen</th>
                                <th class="px-3 py-2 text-center text-xs font-medium text-gray-500 uppercase">Başarı %</th>
                                <th class="px-3 py-2 text-center text-xs font-medium text-gray-500 uppercase">Trend</th>
                            </tr>
                        </thead>
                        <tbody class="divide-y divide-gray-200">
                            @foreach (var customer in Model.TicketsByCustomer.Take(10))
                            {
                                var successRate = customer.Count > 0 ? Math.Round((double)(customer.ResolvedCount ?? 0) / customer.Count * 100, 1) : 0;
                                <tr class="hover:bg-gray-50">
                                    <td class="px-3 py-2">
                                        <div class="flex items-center">
                                            <div class="w-6 h-6 bg-blue-100 rounded-full flex items-center justify-center mr-2">
                                                <span class="text-blue-600 font-medium text-xs">@customer.CustomerName.Substring(0, 1)</span>
                                            </div>
                                            <span class="font-medium text-gray-900 text-sm">@customer.CustomerName</span>
                                        </div>
                                    </td>
                                    <td class="px-3 py-2 text-center">
                                        <span class="bg-slate-100 text-slate-800 px-2 py-1 rounded-full text-xs font-medium">@customer.Count</span>
                                    </td>
                                    <td class="px-3 py-2 text-center">
                                        <span class="bg-amber-100 text-amber-800 px-2 py-1 rounded-full text-xs font-medium">@(customer.ActiveCount ?? 0)</span>
                                    </td>
                                    <td class="px-3 py-2 text-center">
                                        <span class="bg-emerald-100 text-emerald-800 px-2 py-1 rounded-full text-xs font-medium">@(customer.ResolvedCount ?? 0)</span>
                                    </td>
                                    <td class="px-3 py-2 text-center">
                                        <div class="flex items-center justify-center">
                                            <span class="text-sm font-semibold @(successRate >= 80 ? "text-emerald-600" : successRate >= 60 ? "text-amber-600" : "text-red-600")">
                                                %@successRate
                                            </span>
                                        </div>
                                    </td>
                                    <td class="px-3 py-2 text-center">
                                        @if (customer.ActiveCount > customer.ResolvedCount)
                                        {
                                            <i class="fas fa-arrow-up text-red-500 text-xs"></i>
                                        }
                                        else if (customer.ResolvedCount > customer.ActiveCount)
                                        {
                                            <i class="fas fa-arrow-down text-emerald-500 text-xs"></i>
                                        }
                                        else
                                        {
                                            <i class="fas fa-minus text-gray-400 text-xs"></i>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }

        <!-- 30 Günlük Trend -->
        @if (Model.TicketsTrend?.Any() == true)
        {
            <div class="bg-white rounded-lg shadow-sm border p-4">
                <div class="flex items-center justify-between mb-4">
                    <h3 class="text-base font-semibold text-gray-900">30 Günlük Aktivite Trendi</h3>
                    <i class="fas fa-chart-line text-gray-400 text-sm"></i>
                </div>

                <div class="h-40">
                    <canvas id="trendChart" class="w-full h-full"></canvas>
                </div>

                <!-- Trend Özeti -->
                <div class="grid grid-cols-4 gap-3 mt-4 pt-3 border-t border-gray-100">
                    <div class="text-center">
                        <p class="text-xs text-gray-500">Günlük Ort.</p>
                        <p class="text-sm font-semibold text-blue-600">@(Math.Round(Model.TicketsTrend.Average(x => x.CreatedCount), 1))</p>
                    </div>
                    <div class="text-center">
                        <p class="text-xs text-gray-500">Çözüm Ort.</p>
                        <p class="text-sm font-semibold text-emerald-600">@(Math.Round(Model.TicketsTrend.Average(x => x.ResolvedCount ?? 0), 1))</p>
                    </div>
                    <div class="text-center">
                        <p class="text-xs text-gray-500">En Yoğun</p>
                        <p class="text-sm font-semibold text-purple-600">@Model.TicketsTrend.OrderByDescending(x => x.CreatedCount).First().Date.ToString("dd.MM")</p>
                    </div>
                    <div class="text-center">
                        <p class="text-xs text-gray-500">Verimlilik</p>
                        <p class="text-sm font-semibold text-indigo-600">%@(Model.TicketsTrend.Any() ? Math.Round((double)Model.TicketsTrend.Sum(x => x.ResolvedCount ?? 0) / Math.Max(Model.TicketsTrend.Sum(x => x.CreatedCount), 1) * 100, 1) : 0)</p>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- Right Column: Side Panels (1 column) -->
    <div class="space-y-6">

        <!-- Kritik Bekleyen Ticketlar -->
        @if (Model.LongTermTickets?.Any() == true)
        {
            <div class="bg-white rounded-lg shadow-sm border p-4">
                <div class="flex items-center justify-between mb-4">
                    <div>
                        <h3 class="text-sm font-semibold text-gray-900">Kritik Bekleyen</h3>
                        <p class="text-xs text-gray-500">15+ gün çözümde</p>
                    </div>
                    <span class="bg-red-100 text-red-800 text-xs px-2 py-1 rounded-full font-medium">
                        @Model.LongTermTickets.Count
                    </span>
                </div>

                <div class="space-y-2 max-h-64 overflow-y-auto">
                    @foreach (var ticket in Model.LongTermTickets.Take(8))
                    {
                        <div class="border border-red-100 bg-red-50/30 rounded-lg p-3">
                            <div class="flex items-start justify-between mb-2">
                                <div class="flex-1">
                                    <div class="text-xs font-semibold text-gray-900">#@ticket.TicketNumber</div>
                                    <div class="text-xs text-gray-600 truncate" title="@ticket.Title">@ticket.Title</div>
                                </div>
                                <span class="bg-red-100 text-red-700 text-xs px-2 py-0.5 rounded-full font-medium ml-2">
                                    @ticket.DaysInResolution g
                                </span>
                            </div>
                            <div class="flex items-center justify-between text-xs">
                                <span class="text-gray-600 truncate">@ticket.CustomerName</span>
                                <a href="@Url.Action("Details", "Tickets", new { id = ticket.Id })"
                                   class="text-blue-600 hover:text-blue-800 font-medium">Detay</a>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
        else
        {
            <div class="bg-white rounded-lg shadow-sm border p-4">
                <div class="text-center py-6">
                    <i class="fas fa-check-circle text-emerald-300 text-2xl mb-2"></i>
                    <h4 class="text-sm font-medium text-gray-900 mb-1">Mükemmel!</h4>
                    <p class="text-xs text-gray-500">Kritik bekleyen ticket yok</p>
                </div>
            </div>
        }

        <!-- Top Müşteriler -->
        @if (Model.TicketsByCustomer?.Any() == true)
        {
            <div class="bg-white rounded-lg shadow-sm border p-4">
                <div class="flex items-center justify-between mb-4">
                    <h3 class="text-sm font-semibold text-gray-900">Top Müşteriler</h3>
                    <i class="fas fa-trophy text-amber-400 text-sm"></i>
                </div>

                <div class="space-y-2 max-h-48 overflow-y-auto">
                    @foreach (var (customer, index) in Model.TicketsByCustomer.Take(6).Select((c, i) => (c, i)))
                    {
                        var medalColor = index switch
                        {
                            0 => "bg-amber-100 text-amber-700",
                            1 => "bg-gray-100 text-gray-700",
                            2 => "bg-orange-100 text-orange-700",
                            _ => "bg-blue-100 text-blue-700"
                        };

                        <div class="flex items-center justify-between p-2 bg-gray-50 rounded-lg">
                            <div class="flex items-center flex-1">
                                <div class="w-6 h-6 @medalColor rounded-full flex items-center justify-center mr-2 text-xs font-bold">
                                    @(index + 1)
                                </div>
                                <span class="text-xs font-medium text-gray-900 truncate">@customer.CustomerName</span>
                            </div>
                            <div class="text-right ml-2">
                                <div class="text-xs font-semibold text-gray-900">@customer.Count</div>
                                <div class="text-xs text-gray-500">ticket</div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }

        <!-- Hızlı İstatistikler -->
        <div class="bg-white rounded-lg shadow-sm border p-4">
            <h3 class="text-sm font-semibold text-gray-900 mb-4">Hızlı İstatistikler</h3>

            <div class="space-y-3">
                <!-- Bugünkü Aktivite -->
                <div class="flex items-center justify-between p-2 bg-blue-50 rounded-lg">
                    <div class="flex items-center">
                        <i class="fas fa-calendar-day text-blue-600 text-sm mr-2"></i>
                        <span class="text-xs text-gray-700">Bugün Oluşturulan</span>
                    </div>
                    <span class="text-sm font-semibold text-blue-600">
                        @(Model.TicketsTrend?.FirstOrDefault(x => x.Date.Date == DateTime.Today)?.CreatedCount ?? 0)
                    </span>
                </div>

                @* <!-- Ortalama Çözüm Süresi -->
                <div class="flex items-center justify-between p-2 bg-emerald-50 rounded-lg">
                    <div class="flex items-center">
                        <i class="fas fa-clock text-emerald-600 text-sm mr-2"></i>
                        <span class="text-xs text-gray-700">Ort. Çözüm Süresi</span>
                    </div>
                    <span class="text-sm font-semibold text-emerald-600">~3.2 gün</span>
                </div> *@

                <!-- En Aktif Tür -->
                @if (Model.TicketsByType?.Any() == true)
                {
                    <div class="flex items-center justify-between p-2 bg-purple-50 rounded-lg">
                        <div class="flex items-center">
                            <i class="fas fa-star text-purple-600 text-sm mr-2"></i>
                            <span class="text-xs text-gray-700">En Popüler Tür</span>
                        </div>
                        <span class="text-sm font-semibold text-purple-600 truncate">
                            @Model.TicketsByType.First().TypeName
                        </span>
                    </div>
                }

                @* <!-- Müşteri Memnuniyeti -->
                <div class="flex items-center justify-between p-2 bg-amber-50 rounded-lg">
                    <div class="flex items-center">
                        <i class="fas fa-smile text-amber-600 text-sm mr-2"></i>
                        <span class="text-xs text-gray-700">Genel Memnuniyet</span>
                    </div>
                    <span class="text-sm font-semibold text-amber-600">%87.5</span>
                </div> *@
            </div>
        </div>

    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Chart ayarları - Kompakt
            Chart.defaults.font.size = 11;
            Chart.defaults.plugins.legend.labels.padding = 12;
            Chart.defaults.plugins.legend.labels.boxWidth = 12;

            // Status Donut Chart
            @if (Model.TicketsByStatus?.Any() == true)
            {
                    <text>
                    const statusCtx = document.getElementById('statusChart').getContext('2d');
                    new Chart(statusCtx, {
                        type: 'doughnut',
                        data: {
                            labels: [@Html.Raw(string.Join(",", Model.TicketsByStatus.Select(s => $"'{s.Status}'")))],
                            datasets: [{
                                data: [@string.Join(",", Model.TicketsByStatus.Select(s => s.Count))],
                                backgroundColor: [@Html.Raw(string.Join(",", Model.TicketsByStatus.Select(s => $"'{s.Color}'")))],
                                borderWidth: 2,
                                borderColor: '#fff',
                                hoverBorderWidth: 3
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                legend: {
                                    display: true,
                                    position: 'bottom',
                                    labels: {
                                        padding: 15,
                                        font: { size: 10 },
                                        usePointStyle: true,
                                        pointStyle: 'circle'
                                    }
                                },
                                tooltip: {
                                    bodyFont: { size: 11 },
                                    titleFont: { size: 12 },
                                    callbacks: {
                                        label: function(context) {
                                            return context.label + ': ' + context.parsed + ' ticket';
                                        }
                                    }
                                }
                            },
                            cutout: '60%'
                        }
                    });
                    </text>
            }

            // Type Bar Chart
            @if (Model.TicketsByType?.Any() == true)
            {
                    <text>
                    const typeCtx = document.getElementById('typeChart').getContext('2d');
                    new Chart(typeCtx, {
                        type: 'bar',
                        data: {
                            labels: [@Html.Raw(string.Join(",", Model.TicketsByType.Select(t => $"'{t.TypeName}'")))],
                            datasets: [{
                                label: 'Ticket Sayısı',
                                data: [@string.Join(",", Model.TicketsByType.Select(t => t.Count))],
                                backgroundColor: [@Html.Raw(string.Join(",", Model.TicketsByType.Select(t => $"'{t.Color}'")))],
                                borderRadius: 6,
                                borderSkipped: false,
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                legend: { display: false },
                                tooltip: {
                                    bodyFont: { size: 11 },
                                    titleFont: { size: 12 }
                                }
                            },
                            scales: {
                                y: {
                                    beginAtZero: true,
                                    ticks: {
                                        stepSize: 1,
                                        font: { size: 10 }
                                    },
                                    grid: {
                                        color: '#f3f4f6'
                                    }
                                },
                                x: {
                                    ticks: {
                                        font: { size: 10 },
                                        maxRotation: 45
                                    },
                                    grid: {
                                        display: false
                                    }
                                }
                            }
                        }
                    });
                    </text>
            }

            // Trend Line Chart
            @if (Model.TicketsTrend?.Any() == true)
            {
                    <text>
                    const trendCtx = document.getElementById('trendChart').getContext('2d');
                    new Chart(trendCtx, {
                        type: 'line',
                        data: {
                            labels: [@Html.Raw(string.Join(",", Model.TicketsTrend.Select(t => $"'{t.Date.ToString("dd.MM")}'")))],
                            datasets: [{
                                label: 'Oluşturulan',
                                data: [@string.Join(",", Model.TicketsTrend.Select(t => t.CreatedCount))],
                                borderColor: '#3B82F6',
                                backgroundColor: 'rgba(59, 130, 246, 0.1)',
                                tension: 0.4,
                                fill: true,
                                pointRadius: 2,
                                pointHoverRadius: 4,
                                borderWidth: 2
                            }, {
                                label: 'Çözülen',
                                data: [@string.Join(",", Model.TicketsTrend.Select(t => t.ResolvedCount ?? 0))],
                                borderColor: '#10B981',
                                backgroundColor: 'rgba(16, 185, 129, 0.1)',
                                tension: 0.4,
                                fill: true,
                                pointRadius: 2,
                                pointHoverRadius: 4,
                                borderWidth: 2
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                legend: {
                                    display: true,
                                    position: 'top',
                                    labels: {
                                        padding: 12,
                                        font: { size: 10 },
                                        usePointStyle: true
                                    }
                                },
                                tooltip: {
                                    bodyFont: { size: 10 },
                                    titleFont: { size: 11 }
                                }
                            },
                            scales: {
                                y: {
                                    beginAtZero: true,
                                    ticks: {
                                        stepSize: 1,
                                        font: { size: 9 }
                                    },
                                    grid: {
                                        color: '#f3f4f6'
                                    }
                                },
                                x: {
                                    ticks: {
                                        font: { size: 9 },
                                        maxTicksLimit: 10
                                    },
                                    grid: {
                                        display: false
                                    }
                                }
                            },
                            interaction: {
                                intersect: false,
                                mode: 'index'
                            }
                        }
                    });
                    </text>
            }

            // Time filter functionality
            document.getElementById('timeFilter')?.addEventListener('change', function(e) {
                // Bu fonksiyonalite ileride AJAX ile güncellenecek
                console.log('Zaman filtresi:', e.target.value);
            });
        });
    </script>
}