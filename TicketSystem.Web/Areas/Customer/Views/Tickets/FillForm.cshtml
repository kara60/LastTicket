@model TicketSystem.Web.Areas.Customer.Models.CreateTicketStep3ViewModel
@{
    ViewData["Title"] = "Yeni Ticket Oluştur - Form Doldurma";
}

<!-- Progress Bar -->
<div class="mb-8">
    <div class="flex items-center">
        <div class="flex items-center text-green-600">
            <span class="flex items-center justify-center w-8 h-8 border-2 border-green-600 rounded-full bg-green-600 text-white text-sm font-medium">
                <i class="fas fa-check text-xs"></i>
            </span>
            <span class="ml-2 text-sm font-medium">Tür Seçimi</span>
        </div>
        <div class="flex-1 h-1 mx-4 bg-green-600"></div>
        <div class="flex items-center text-green-600">
            <span class="flex items-center justify-center w-8 h-8 border-2 border-green-600 rounded-full bg-green-600 text-white text-sm font-medium">
                <i class="fas fa-check text-xs"></i>
            </span>
            <span class="ml-2 text-sm font-medium">Kategori</span>
        </div>
        <div class="flex-1 h-1 mx-4 bg-green-600"></div>
        <div class="flex items-center text-blue-600">
            <span class="flex items-center justify-center w-8 h-8 border-2 border-blue-600 rounded-full bg-blue-600 text-white text-sm font-medium">3</span>
            <span class="ml-2 text-sm font-medium">Form</span>
        </div>
        <div class="flex-1 h-1 mx-4 bg-gray-200"></div>
        <div class="flex items-center text-gray-400">
            <span class="flex items-center justify-center w-8 h-8 border-2 border-gray-300 rounded-full text-sm font-medium">4</span>
            <span class="ml-2 text-sm font-medium">Önizleme</span>
        </div>
    </div>
</div>

<!-- Selected Type & Category Info -->
<div class="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <!-- Selected Type -->
        <div class="flex items-center">
            <div class="w-10 h-10 rounded-lg flex items-center justify-center mr-3" style="background-color: @(Model.SelectedType?.Color)20;">
                @{
                    var typeEmoji = Model.SelectedType?.Icon switch
                    {
                        "bug" => "🐛",
                        "lightbulb" => "💡",
                        "graduation-cap" => "🎓",
                        "cog" => "⚙️",
                        "question-circle" => "❓",
                        "exclamation-triangle" => "⚠️",
                        "tools" => "🔧",
                        "chart-line" => "📈",
                        "headset" => "🎧",
                        "rocket" => "🚀",
                        _ => "🎫"
                    };
                }
                <span class="text-xl">@typeEmoji</span>
            </div>
            <div>
                <h3 class="font-medium text-gray-900">@Model.SelectedType?.Name</h3>
                <p class="text-sm text-gray-600">Seçilen Tür</p>
            </div>
        </div>

        <!-- Selected Category -->
        <div class="flex items-center">
            <div class="w-10 h-10 rounded-lg flex items-center justify-center mr-3" style="background-color: @(Model.SelectedCategory?.Color)20;">
                @{
                    var categoryEmoji = Model.SelectedCategory?.Icon switch
                    {
                        "bug" => "🐛",
                        "lightbulb" => "💡",
                        "graduation-cap" => "🎓",
                        "cog" => "⚙️",
                        "question-circle" => "❓",
                        "exclamation-triangle" => "⚠️",
                        "tools" => "🔧",
                        "chart-line" => "📈",
                        "headset" => "🎧",
                        "rocket" => "🚀",
                        _ => "📁"
                    };
                }
                <span class="text-xl">@categoryEmoji</span>
            </div>
            <div>
                <h3 class="font-medium text-gray-900">@Model.SelectedCategory?.Name</h3>
                <p class="text-sm text-gray-600">Seçilen Kategori</p>
            </div>
        </div>
    </div>
</div>

<form method="post" action="/Customer/Tickets/PreviewTicket" id="ticketForm">
    @Html.AntiForgeryToken()
    <input type="hidden" asp-for="SelectedTypeId" />
    <input type="hidden" asp-for="SelectedCategoryId" />

    <div class="bg-white rounded-lg shadow">
        <div class="px-6 py-4 border-b border-gray-200">
            <h2 class="text-xl font-semibold text-gray-900 flex items-center">
                <span class="text-xl mr-2">@typeEmoji</span>
                @Model.SelectedType?.Name Formu
            </h2>
            <p class="text-gray-600 mt-1">Lütfen gerekli bilgileri doldurun.</p>
        </div>

        <div class="p-6">
            <!-- Validation Summary -->
            @if (!ViewData.ModelState.IsValid)
            {
                <div class="bg-red-50 border-l-4 border-red-400 p-4 mb-6">
                    <div class="flex">
                        <div class="flex-shrink-0">
                            <i class="fas fa-exclamation-circle text-red-400"></i>
                        </div>
                        <div class="ml-3">
                            <h3 class="text-sm font-medium text-red-800">Lütfen aşağıdaki hataları düzeltin:</h3>
                            <div class="mt-2 text-sm text-red-700">
                                <ul class="list-disc pl-5 space-y-1">
                                    @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                                    {
                                        <li>@error.ErrorMessage</li>
                                    }
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            }

            <!-- Kategori Modülleri -->
            @if (Model.SelectedCategory?.Modules?.Any() == true)
            {
                <div class="mb-6">
                    <label class="block text-sm font-medium text-gray-700 mb-2">
                        Modül Seçimi *
                    </label>
                    <select name="SelectedModule" required
                            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                        <option value="">Bir modül seçiniz</option>
                        @foreach (var module in Model.SelectedCategory.Modules)
                        {
                            <option value="@module.Name" @(Model.SelectedModule == module.Name ? "selected" : "")>@module.Name</option>
                        }
                    </select>
                </div>
            }

            <!-- Dynamic Form Fields -->
            @if (!string.IsNullOrEmpty(Model.SelectedType?.FormDefinition))
            {
                <div id="dynamicFormFields" class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                    <!-- Dynamic fields will be rendered here by JavaScript -->
                </div>
            }
            else
            {
                <!-- Fallback eğer form definition yoksa -->
                <div class="text-center py-12 bg-gray-50 rounded-lg">
                    <i class="fas fa-exclamation-triangle text-gray-400 text-4xl mb-4"></i>
                    <h3 class="text-lg font-medium text-gray-900 mb-2">Form Şablonu Bulunamadı</h3>
                    <p class="text-gray-500">Bu ticket türü için form şablonu tanımlanmamış.</p>
                </div>
            }
        </div>

        <div class="px-6 py-4 border-t border-gray-200 flex justify-between">
            <a href="javascript:history.back()"
               class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 transition-colors">
                <i class="fas fa-arrow-left mr-2"></i>Geri
            </a>
            <button type="submit"
                    id="submitBtn"
                    class="inline-flex items-center px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors">
                Önizleme <i class="fas fa-arrow-right ml-2"></i>
            </button>
        </div>
    </div>
</form>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // FormDefinition parse etme
            const formDefinitionString = '@Html.Raw(Model.SelectedType?.FormDefinition?.Replace("\"", "\\\"") ?? "")';
            let formDefinition = null;

            if (formDefinitionString && formDefinitionString !== '') {
                try {
                    formDefinition = JSON.parse(formDefinitionString);
                } catch (e) {
                    console.error('Error parsing FormDefinition:', e);
                    console.log('Raw FormDefinition:', formDefinitionString);
                }
            }

            if (formDefinition && formDefinition.fields && formDefinition.fields.length > 0) {
                renderDynamicFields(formDefinition.fields);
            } else {
                console.log('No form definition found or empty fields');
            }

            // Form submission handler
            const ticketForm = document.getElementById('ticketForm');
            if (ticketForm) {
                ticketForm.addEventListener('submit', function(e) {
                    // Form verilerini debug için logla
                    console.log('Form submission - checking data:');
                    const formData = new FormData(ticketForm);
                    let hasFormData = false;

                    for (let [key, value] of formData.entries()) {
                        console.log(`${key}: ${value}`);
                        if (key.startsWith('FormData[') && value.trim() !== '') {
                            hasFormData = true;
                        }
                    }

                    // Eğer hiç form verisi yoksa uyar
                    if (!hasFormData) {
                        e.preventDefault();
                        alert('Lütfen form alanlarını doldurunuz.');
                        return false;
                    }

                    const submitBtn = document.getElementById('submitBtn');
                    if (submitBtn) {
                        submitBtn.disabled = true;
                        submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>İşleniyor...';
                    }
                });
            }
        });

        function renderDynamicFields(fields) {
            const container = document.getElementById('dynamicFormFields');
            if (!container) {
                console.error('dynamicFormFields container not found');
                return;
            }

            let fieldsHtml = '';
            let hasRequiredFields = false;

            fields.forEach(function(field, index) {
                if (!field.name || !field.label) {
                    console.log('Skipping field due to missing name or label:', field);
                    return;
                }

                // Dictionary binding için doğru format: FormData[key]
                const fieldName = `FormData[${field.name}]`;
                const isRequired = field.required || false;
                const placeholder = field.placeholder || '';

                if (isRequired) hasRequiredFields = true;

                fieldsHtml += '<div>';
                fieldsHtml += `<label class="block text-sm font-medium text-gray-700 mb-2">`;
                fieldsHtml += field.label;
                if (isRequired) {
                    fieldsHtml += ' <span class="text-red-500">*</span>';
                }
                fieldsHtml += '</label>';

                switch (field.type) {
                    case 'textarea':
                        fieldsHtml += `<textarea name="${fieldName}" rows="4" placeholder="${placeholder}"`;
                        if (isRequired) fieldsHtml += ' required';
                        fieldsHtml += ' class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"></textarea>';
                        break;

                    case 'select':
                        fieldsHtml += `<select name="${fieldName}"`;
                        if (isRequired) fieldsHtml += ' required';
                        fieldsHtml += ' class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500">';
                        fieldsHtml += '<option value="">Seçiniz...</option>';

                        if (field.options && Array.isArray(field.options)) {
                            field.options.forEach(function(option) {
                                fieldsHtml += `<option value="${option}">${option}</option>`;
                            });
                        }
                        fieldsHtml += '</select>';
                        break;

                    case 'checkbox':
                        fieldsHtml += '<div class="flex items-center">';
                        fieldsHtml += `<input type="checkbox" name="${fieldName}" value="true" id="field_${index}"`;
                        if (isRequired) fieldsHtml += ' required';
                        fieldsHtml += ' class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded">';
                        // Checkbox için hidden field (ASP.NET Core için)
                        fieldsHtml += `<input type="hidden" name="${fieldName}" value="false">`;
                        fieldsHtml += `<label for="field_${index}" class="ml-2 text-sm text-gray-700">${placeholder || field.label}</label>`;
                        fieldsHtml += '</div>';
                        break;

                    case 'number':
                        fieldsHtml += `<input type="number" name="${fieldName}" placeholder="${placeholder}"`;
                        if (isRequired) fieldsHtml += ' required';
                        if (field.validation) {
                            if (field.validation.min !== null && field.validation.min !== undefined) fieldsHtml += ` min="${field.validation.min}"`;
                            if (field.validation.max !== null && field.validation.max !== undefined) fieldsHtml += ` max="${field.validation.max}"`;
                        }
                        fieldsHtml += ' class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500">';
                        break;

                    case 'email':
                        fieldsHtml += `<input type="email" name="${fieldName}" placeholder="${placeholder}"`;
                        if (isRequired) fieldsHtml += ' required';
                        fieldsHtml += ' class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500">';
                        break;

                    case 'tel':
                        fieldsHtml += `<input type="tel" name="${fieldName}" placeholder="${placeholder}"`;
                        if (isRequired) fieldsHtml += ' required';
                        fieldsHtml += ' class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500">';
                        break;

                    case 'date':
                        fieldsHtml += `<input type="date" name="${fieldName}"`;
                        if (isRequired) fieldsHtml += ' required';
                        fieldsHtml += ' class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500">';
                        break;

                    default: // text
                        fieldsHtml += `<input type="text" name="${fieldName}" placeholder="${placeholder}"`;
                        if (isRequired) fieldsHtml += ' required';
                        if (field.validation) {
                            if (field.validation.minLength) fieldsHtml += ` minlength="${field.validation.minLength}"`;
                            if (field.validation.maxLength) fieldsHtml += ` maxlength="${field.validation.maxLength}"`;
                        }
                        fieldsHtml += ' class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500">';
                        break;
                }

                fieldsHtml += '</div>';
            });

            container.innerHTML = fieldsHtml;

            // Eğer required field varsa bilgi göster
            if (hasRequiredFields) {
                const infoDiv = document.createElement('div');
                infoDiv.className = 'col-span-full bg-blue-50 border border-blue-200 rounded-lg p-3 text-sm text-blue-700';
                infoDiv.innerHTML = '<i class="fas fa-info-circle mr-2"></i>(*) işaretli alanlar zorunludur.';
                container.appendChild(infoDiv);
            }

            console.log(`Rendered ${fields.length} dynamic fields`);
        }
    </script>
}